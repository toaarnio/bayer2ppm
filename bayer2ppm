#!/usr/bin/python3 -B

"""
Converts Bayer raw PGM/PNG/RAW images into RGB PPM.
"""

# pylint: disable=invalid-name
# pylint: disable=c-extension-no-member
# pylint: disable=wrong-import-position
# pylint: disable=too-many-locals
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-branches
# pylint: disable=too-many-statements
# pylint: disable=too-few-public-methods

import sys              # built-in library
import os               # built-in library
import signal           # built-in library
import time             # built-in library
import copy             # built-in library
import pprint           # built-in library
import traceback        # built-in library
import numpy as np      # pip install numpy
import imsize           # pip install imsize
import imgio            # pip install imgio
import rawpy            # pip install rawpy
import rawpipe          # pip install rawpipe
import argv             # local import: argv.py


class ISPConfig:

    def __init__(self):
        self.width = None             # None | <uint>
        self.height = None            # None | <uint>
        self.maxval = None            # None | <uint>
        self.bpp = None               # None | <uint>
        self.blacklevel = None        # None | <float>
        self.whitelevel = None        # None | <float>
        self.bayer_pattern = None     # None | RGGB | GBRG | BGGR | GRBG
        self.demosaic = True          # True | False
        self.lsc = None               # None | <floatMxN> | <floatMxNx3>
        self.wb = None                # None | <float2>
        self.ccm = None               # None | <float3x3>
        self.tonemap = None           # None | <string>
        self.cnf_strength = None      # None | <float>
        self.gamma = None             # None | sRGB | rec709 | <floatN>
        self.lscfile = None           # None | <filename>
        self.wbfile = None            # None | <filename>
        self.ccmfile = None           # None | <filename>
        self.gammamode = None         # None | sRGB | rec709 | <filename>
        self.verbose = None           # True | False
        self.debug = None             # True | False
        self.outformat = "ppm"        # currently hardcoded

    def __repr__(self):
        reprstr = f"<ISPConfig {self.__dict__}>"
        return reprstr

    def __str__(self):
        def formatter(ndarr):
            if ndarr.size > 10:
                fmt = f"[shape = {ndarr.shape}, "
                fmt += f"range = [{np.min(ndarr):.2f}, {np.max(ndarr):.2f}]"
            elif ndarr.ndim >= 2:
                fmt = f"\n{ndarr}"
            else:
                fmt = f"{ndarr}"
            return fmt
        np.set_string_function(formatter)
        infostr = pprint.pformat(self.__dict__)
        np.set_string_function(None)
        return infostr


def bayer2ppm(config, infilespec):
    tStart = t0 = time.time()
    config = copy.copy(config)  # avoid modifying the original
    infilename = os.path.basename(infilespec)
    outfilename = infilename.rsplit('.', 1)[0] + "." + config.outformat
    print(f"Converting {infilename} to {config.outformat.upper()}...")
    imginfo = imsize.read(infilespec)
    config.width = config.width or imginfo.width       # unreliable for DNG
    config.height = config.height or imginfo.height    # unreliable for DNG
    config.bpp = config.bpp or imginfo.bitdepth        # unreliable for DNG
    config.maxval = 2 ** int(np.ceil(config.bpp)) - 1  # unreliable for DNG
    is_dng = imginfo.filetype in ["dng", "nef", "cr2"]
    read_raw = lambda: imgio.imread(infilespec, config.width, config.height, config.bpp)[0]
    raw = read_dng(config, infilespec) if is_dng else read_raw()
    config.bayer_pattern = config.bayer_pattern or "RGGB"
    height, width = raw.shape[:2]
    raw = raw.astype(np.float32)
    if config.verbose:
        print(f"{_elapsed(t0)} - reading input file [{infilename}]: {width} x {height}, {config.bpp} bpp; range = [{np.min(raw)}, {np.max(raw)}]")
    image = isp(config, raw)
    t0 = time.time()
    imgio.imwrite(outfilename, image, config.maxval)
    if config.verbose:
        print(f"{_elapsed(t0)} - writing output file [{outfilename}]: {width} x {height}, {config.bpp} bpp")
        print(f"{_elapsed(tStart)} - TOTAL\n")


def read_dng(config, infilespec):
    dng = rawpy.imread(infilespec)
    raw = dng.raw_image.copy()  # NB: extracting the whole image, including metadata rows, black columns, etc.
    config.width = raw.shape[1]
    config.height = raw.shape[0]
    config.bpp = 16  # this may be wrong, but we're rescaling to [blacklevel, whitelevel] anyway
    config.maxval = 2 ** int(np.ceil(config.bpp)) - 1
    if config.bayer_pattern is None:
        raw_pattern = [chr(dng.color_desc[ch]) for ch in dng.raw_pattern.flatten()]
        config.bayer_pattern = ''.join(raw_pattern)  # [0 1 3 2] ==> "RGGB"
    if config.wb is None:
        config.wb = np.array(dng.camera_whitebalance)[[0, 2]]  # pick r & b, drop gr & gb
        config.wb = config.wb / 1024 if np.any(config.wb >= 1024) else config.wb
    if config.ccm is None:
        ccm1 = dng.color_matrix[:, :3]   # 3 x 4 => 3 x 3, drop zero column
        ccm2 = dng.rgb_xyz_matrix[:3, :]  # 4 x 3 ==> 3 x 3, drop zero row
        config.ccm = ccm1 if np.any(ccm1) else ccm2.T  # one or the other is always zero (it seems)
        assert np.any(config.ccm), "CCM must not be all-zero."
    if config.blacklevel is None:
        config.blacklevel = np.mean(dng.black_level_per_channel)  # take the average of per-channel black levels
        _check(np.all(np.array(dng.black_level_per_channel) == config.blacklevel), "Per-channel black levels are not supported; using their average instead.")
    return raw


def combine_lsc_wb(config):
    alg = rawpipe.Algorithms(config.verbose)
    c1, c2, c3, c4 = alg.bayer_split(config.lsc)
    bayermap = dict(zip("RGB", config.wb))
    c1 *= bayermap[config.bayer_pattern[0]]
    c2 *= bayermap[config.bayer_pattern[1]]
    c3 *= bayermap[config.bayer_pattern[2]]
    c4 *= bayermap[config.bayer_pattern[3]]
    lsc = alg.bayer_combine(c1, c2, c3, c4)
    return lsc


def lsc_bayer_domain(config, img):
    if config.lsc is not None and config.lsc.ndim == 2:
        alg = rawpipe.Algorithms(config.verbose)
        img = alg.lsc(img, config.lsc)
    return img


def lsc_rgb_domain(config, img):
    if config.lsc is not None and config.lsc.ndim == 3:
        alg = rawpipe.Algorithms(config.verbose)
        img = alg.lsc(img, config.lsc)
    return img


def isp(config, img):
    if not config.debug:
        alg = rawpipe.Algorithms(config.verbose)
        img = alg.linearize(img, config.blacklevel, config.whitelevel)
        img = lsc_bayer_domain(config, img)
        img = alg.clip(img, 0.0, 1.0)
        img = alg.demosaic(img, config.bayer_pattern)
        img = lsc_rgb_domain(config, img)
        img = alg.wb(img, config.wb)
        img = alg.ccm(img, config.ccm)
        img = alg.tonemap(img, config.tonemap)
        img = alg.chroma_denoise(img, config.cnf_strength)
        img = alg.gamma(img, config.gammamode, config.gamma)
        img = alg.quantize(img, config.maxval, np.uint16)
    else:
        alg = rawpipe.Algorithms(config.verbose)
        img = alg.linearize(img, config.blacklevel, config.whitelevel)
        overflow_raw = (img >= 1.0)
        img = alg.demosaic(img, config.bayer_pattern)
        overflow_demosaic = np.max(img >= 1.0, axis=2)
        img = alg.lsc(img, config.lsc)
        img = alg.wb(img, config.wb)
        overflow_wb = np.max(img >= 1.0, axis=2)
        img = alg.ccm(img, config.ccm)
        overflow_ccm = np.max(img >= 1.0, axis=2)
        img = alg.tonemap(img, config.tonemap)
        img = alg.chroma_denoise(img, config.cnf_strength)
        img = alg.gamma(img, config.gammamode, config.gamma)
        img = alg.quantize(img, config.maxval, np.uint16)
        t0 = time.time()
        maxval = config.maxval
        oflow = img.copy()
        oflow[..., :] = np.mean(oflow, axis=2, keepdims=True)  # black & white image for overflow markers
        oflow[overflow_ccm] = [maxval, 0, maxval]  # MAGENTA ==> overflow due to CCM (but not in raw/demosaic/lsc/wb)
        oflow[overflow_wb] = [0, 0, maxval]        # BLUE ==> overflow due to LSC/WB gains (but not in raw/demosaic)
        oflow[overflow_demosaic] = [0, maxval, 0]  # GREEN ==> overflow due to demosaicing (but not in raw)
        oflow[overflow_raw] = [maxval, 0, 0]       # RED ==> overflow in original raw data
        imgio.imwrite("overflow.ppm", oflow, maxval)
        if config.verbose:
            print(f"{_elapsed(t0)} - generating grayscale image with overflow markers [overflow.ppm]")
    return img


class TerminationRequest(IOError):
    pass


def _onExit():
    raise TerminationRequest("Terminated by the user.")


def _check(expression, message_if_false):
    if not expression:
        print(message_if_false)


def _enforce(expression, message_if_false):
    if not expression:
        print(message_if_false)
        sys.exit(-1)


def _elapsed(t0):
    elapsed = (time.time() - t0) * 1000
    elapsed = f"{elapsed:8.2f} ms"
    return elapsed


def main():
    config = ISPConfig()
    config.width, config.height = argv.intpair("--size", default=(None, None))
    config.bpp = argv.intval("--bpp", default=None, accepted=[8, 10, 12, 14, 16])
    config.bayer_pattern = argv.stringval("--bayer", default=None, accepted=["RGGB", "GBRG", "BGGR", "GRBG"])
    config.blacklevel = argv.floatval("--blacklevel", default=None)
    config.whitelevel = argv.floatval("--whitelevel", default=None)
    config.wb = argv.floatpair("--wbgain")
    config.tonemap = "Reinhard" if argv.exists("--tonemap") else None
    config.cnf_strength = argv.floatval("--denoise", default=0.0, condition="v >= 0.0")
    config.lscfile = argv.stringval("--lsc", default=None)
    config.wbfile = argv.stringval("--wb", default=None)
    config.ccmfile = argv.stringval("--ccm", default=None)
    config.gammamode = argv.stringval("--gamma", default=None)
    config.verbose = not argv.exists("--quiet")
    config.debug = argv.exists("--debug")
    show_help = argv.exists("--help")
    argv.exitIfAnyUnparsedOptions()

    if len(sys.argv) < 2 or show_help:
        print("Usage: bayer2ppm [options] inputfile.[pgm|png|dng|raw] ...")
        print()
        print("  options:")
        print("    --bpp N                        bits per pixel (for .raw only); default = None")
        print("    --size M N                     width & height in pixels (for .raw only); default = None")
        print("    --bayer RGGB|GBRG|BGGR|GRBG    Bayer order of input file; default = RGGB")
        print("    --blacklevel N                 pixel value to subtract from all pixels; default = Auto")
        print("    --whitelevel N                 pixel value to consider fully saturated; default = Auto")
        print("    --wbgain R B                   multiply R and B values by the given WB gains; default = 1.0 1.0")
        print("    --lsc file.pfm                 load lens shading correction table from PFM file; default = None")
        print("    --wb file.csv                  load white balance gains (R, G, B) from CSV file; default = None")
        print("    --ccm identity|file.csv        load 3 x 3 color correction matrix from CSV file; default = None")
        print("    --tonemap                      apply tonemapping using Reinhard's algorithm; default = None")
        print("    --denoise N                    apply chroma denoising with filter strength N; default = 0.0")
        print("    --gamma sRGB|rec709|file.csv   apply a standard or custom gamma function; default = None")
        print("    --debug                        write processed image with overflow markers to 'overflow.ppm'")
        print("    --quiet                        do not print any timings or traces for diagnostics")
        print("    --help                         show this help message")
        print()
        print("  Converts the given 10/12/14/16-bit sensor raw file(s) into RGB PPM using a reference ISP.")
        print()
        sys.exit(-1)

    # load LSC table from given PFM file
    if config.lscfile is not None:
        lscfiles, _ = argv.filenames([config.lscfile])
        _enforce(lscfiles, f"LSC file {config.lscfile} not found. Terminating.")
        config.lsc, _ = imgio.imread(config.lscfile)
        is_integer = np.all(np.mod(config.lsc, 1) == 0)
        config.lsc = config.lsc.astype(np.float32)
        config.lsc /= 1024.0 if is_integer else 1.0

    # load WB gains from the given CSV file
    if config.wbfile is not None:
        wbfiles, _ = argv.filenames([config.wbfile])
        _enforce(wbfiles, f"WB file {config.wbfile} not found. Terminating.")
        config.wb = np.genfromtxt(config.wbfile, delimiter=",")
        is_integer = np.all(np.mod(config.wb, 1) == 0)
        config.wb /= 1024.0 if is_integer else 1.0

    # load 3 x 3 CCM from given CSV file
    if config.ccmfile is not None:
        if config.ccmfile == "identity":
            config.ccm = np.eye(3)
        else:
            ccmfiles, _ = argv.filenames([config.ccmfile])
            _enforce(ccmfiles, f"CCM file {config.ccmfile} not found. Terminating.")
            config.ccm = np.genfromtxt(config.ccmfile, delimiter=",")
            config.ccm = config.ccm.reshape(3, 3)  # ensure correct shape
            is_integer = np.all(np.mod(config.ccm, 1) == 0)
            config.ccm /= 1024.0 if is_integer else 1.0
            rowsums = np.sum(config.ccm, axis=1)
            _check(np.allclose(rowsums, 1.0, rtol=1e-03), f"WARNING: CCM row sums = {rowsums}")

    # load gamma lookup table from CSV file
    if config.gammamode is not None:
        if config.gammamode not in ["sRGB", "rec709"]:
            gammafiles, _ = argv.filenames([config.gammamode])
            _enforce(gammafiles, f"Gamma curve file {config.gammamode} not found. Terminating.")
            config.gamma = np.genfromtxt(config.gammamode, delimiter=",")
            config.gammamode = "LUT"
        else:
            config.gamma = config.gammamode  # sRGB | rec709

    print(f"\n{config}\n")

    filenames, _ = argv.filenames(sys.argv[1:], [".pgm", ".png", ".dng", ".nef", ".raw", ".cr2"], sort=True, allowAllCaps=True)
    numfiles = len(filenames)
    _enforce(numfiles > 0, "No valid raw Bayer PGM/PNG/DNG/RAW files to process. Terminating.")
    signal.signal(signal.SIGINT, lambda s, f: _onExit())  # Ctrl+C handler
    exitcode = -1
    try:
        t0 = time.time()
        for filename in filenames:
            bayer2ppm(config, filename)
        elapsed = time.time() - t0
        per_file = float(elapsed) / numfiles * 1000
        if numfiles > 1:
            print(f"Processed {numfiles} files in {elapsed:.1f} seconds ({per_file:.0f} ms per file).")
        exitcode = 0
    except BaseException as e:  # pylint: disable=broad-except
        if config.verbose:
            traceback.print_exc()
        else:
            print(f"{e.__class__.__name__}: {e}")
    finally:
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        sys.exit(exitcode)


if __name__ == "__main__":
    np.set_printoptions(formatter={'float': lambda x: f"{x:.3f}"}, linewidth=180)
    main()
