#!/usr/bin/python3 -B

"""
Converts Bayer raw PGM/PNG/RAW images into RGB PPM.
"""

# pylint: disable=invalid-name
# pylint: disable=c-extension-no-member
# pylint: disable=wrong-import-position
# pylint: disable=too-many-locals
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-branches
# pylint: disable=too-many-statements
# pylint: disable=too-few-public-methods

from __future__ import print_function as __print  # hide from help

import sys              # built-in library
import os               # built-in library
import signal           # built-in library
import time             # built-in library
import numpy as np      # pip install numpy
import rawpy            # pip install rawpy
import imgio            # pip install imgio
import cv2              # pip install opencv-python
import argv             # local import: argv.py
import isptools         # local import: isptools.py
import demosaic         # local import: demosaic.py

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'multiproc'))

import multiproc        # submodule import: multiproc.py


class ISPConfig(object):
    def __init__(self):
        self.width = None             # None | <uint>
        self.height = None            # None | <uint>
        self.bpp = None               # None | <uint>
        self.blackLevel = None        # AUTO | <float>
        self.whiteLevel = None        # AUTO | MAX | <float>
        self.bayerPattern = None      # RGGB | GBRG | BGGR | GRBG
        self.gic = None               # None | <float>
        self.wb = None                # None | tuple(<float>, <float>)
        self.wp = None                # None | tuple(<float>, <float>, <float>)
        self.ccmfile = None           # None | <string>
        self.ccm = None               # None | <float3x3>
        self.gamma = None             # None | sRGB | rec709
        self.outbpp = None            # None | <uint>
        self.verbose = None           # True | False
        self.debug = None             # True | False
        self.demosaic = True          # currently hardcoded
        self.dryRun = False           # currently hardcoded
        self.outformat = "ppm"        # currently hardcoded


def bayer2ppm(config, infilename, outfilename):
    print("Converting %s to %s..."%(infilename, config.outformat.upper()))
    elapsed = lambda t0: (time.time() - t0) * 1000
    tStart = t0 = time.time()
    basename = os.path.basename(infilename)
    filetype = basename.rsplit('.', 1)[-1]

    if filetype.lower() in ["dng", "nef", "cr2"]:
        dng = rawpy.imread(infilename)
        raw = dng.raw_image_visible.copy()
        bpp = np.log2(np.max(raw))
        maxval = 2 ** int(np.ceil(bpp)) - 1
        rawPattern = [chr(dng.color_desc[ch]) for ch in dng.raw_pattern.flatten()]
        config.bayerPattern = ''.join(rawPattern)  # [0 1 3 2] ==> "RGGB"
        config.wb = (dng.camera_whitebalance[0], dng.camera_whitebalance[2])  # pick r & b
        ccm1 = dng.color_matrix[:, :3]   # 3 x 4 => 3 x 3, drop zero column
        ccm2 = dng.rgb_xyz_matrix[:3, :]  # 4 x 3 ==> 3 x 3, drop zero row
        config.ccm = ccm1 if np.any(ccm1) else ccm2  # one or the other is always zero (it seems)
        config.ccmfile = f"from {basename}"
        config.blackLevel = dng.black_level_per_channel[0]  # assume all channels are equal
        _assert(np.all(np.array(dng.black_level_per_channel) == config.blackLevel), "Per-channel black levels are not supported.")
        _assert(np.any(config.ccm), "CCM must not be all-zero.")
    else:
        raw, maxval = imgio.imread(infilename, config.width, config.height, config.bpp)

    outbpp = config.outbpp
    blackLevel = config.blackLevel
    whiteLevel = config.whiteLevel
    bayerPattern = config.bayerPattern
    height, width = raw.shape[:2]
    cropRow = np.index_exp[:-1, :]
    cropCol = np.index_exp[:, :-1]
    raw = raw[cropRow] if (height % 2) != 0 else raw  # must have even number of rows
    raw = raw[cropCol] if (width % 2) != 0 else raw   # must have even number of columns
    height, width = raw.shape[:2]
    bpp = np.log2(maxval + 1)
    print("%8.2f ms - reading input file: %d x %d, %d bpp"%(elapsed(t0), width, height, bpp))

    if filetype.lower() in ["dng", "nef", "cr2"]:
        if config.debug:
            t0 = time.time()
            rgb = dng.postprocess(use_camera_wb=True,
                                  half_size=False,
                                  no_auto_bright=True,
                                  highlight_mode=rawpy.HighlightMode.Clip,
                                  output_color=rawpy.ColorSpace.sRGB,
                                  output_bps=16,
                                  gamma=(1,1))
            print("%8.2f ms - demosaicing (RawPy, %s)"%(elapsed(t0), bayerPattern))
            t0 = time.time()
            srgb = rgb / 65535.0
            tonemap = cv2.createTonemapReinhard(gamma=1.0, intensity=0.0, light_adapt=0.0, color_adapt=0.0)
            srgb = tonemap.process(srgb.astype(np.float32))
            print("%8.2f ms - tonemapping (Reinhard)"%(elapsed(t0)))
            t0 = time.time()
            srgb = np.clip(srgb, 0.0, 1.0)
            srgb = isptools.gamma(srgb, 1.0, config.gamma)
            print("%8.2f ms - applying gamma curve (%s)"%(elapsed(t0), config.gamma))
            t0 = time.time()
            srgb = ((srgb * maxval) + 0.5).astype(np.uint16)
            pnmfilename = basename[:-4] + ".pnm"
            imgio.imwrite(pnmfilename, srgb, maxval, verbose=False)
            print("%8.2f ms - writing output file: %d x %d, %d bpp [%s]"%(elapsed(t0), width, height, bpp, pnmfilename))
            print("%8.2f ms - TOTAL [RawPy]"%(elapsed(tStart)))

    if isinstance(config.blackLevel, str):  # dtype: <unchanged>
        t0 = time.time()
        if config.blackLevel == "AUTO":
            blackLevel = isptools.blacklevel(raw, max_outliers=1000)
        print("%8.2f ms - estimating black level: %.2f (%s)"%(elapsed(t0), blackLevel, config.blackLevel))
        if blackLevel > maxval / 8.0:
            print("%sWARNING: Estimated black level is very high. Is this a genuine raw image?"%(' ' * 14))

    if isinstance(config.whiteLevel, str):  # dtype: <unchanged>
        t0 = time.time()
        if config.whiteLevel == "MAX":
            whiteLevel = maxval
        elif config.whiteLevel == "AUTO":
            whiteLevel = isptools.whitelevel(raw, max_outliers=100)
            print("%8.2f ms - estimating white level: %d"%(elapsed(t0), whiteLevel))

    if blackLevel > 0 or whiteLevel < maxval:  # dtype: uint16 / float32 ==> float32
        t0 = time.time()
        raw = raw.astype(np.float32)
        raw = np.clip(raw, blackLevel, whiteLevel)
        raw = raw - blackLevel
        scale = maxval / float(whiteLevel - blackLevel)
        raw = raw * scale
        print("%8.2f ms - rescaling from [%.2f, %.2f] to [0, %d]"%(elapsed(t0), blackLevel, whiteLevel, maxval))

    if config.gic or config.wb:  # dtype: uint16 / float32 ==> float32
        t0 = time.time()
        (gr, gb) = (config.gic, 1.00) if config.gic else (1.0, 1.0)
        (r, b) = config.wb if config.wb is not None else (1.0, 1.0)
        (r, b) = (r / 1024, b / 1024) if r >= 1024 else (r, b)
        if bayerPattern == "RGGB":
            (c1, c2, c3, c4) = (r, gr, gb, b)
        elif bayerPattern == "BGGR":
            (c1, c2, c3, c4) = (b, gb, gr, r)
        elif bayerPattern == "GBRG":
            (c1, c2, c3, c4) = (gb, b, r, gr)
        elif bayerPattern == "GRBG":
            (c1, c2, c3, c4) = (gr, r, b, gb)
        raw = raw.astype(np.float32)
        raw[0::2, 0::2] *= c1
        raw[0::2, 1::2] *= c2
        raw[1::2, 0::2] *= c3
        raw[1::2, 1::2] *= c4
        print("%8.2f ms - applying per-channel gains: [R=%.3f, Gr=%.3f, Gb=%.3f, B=%.3f]"%(elapsed(t0), r, gr, gb, b))

    if config.demosaic:
        t0 = time.time()
        raw = raw.astype(np.float32)
        raw = demosaic.demosaic(raw, pattern=bayerPattern.lower(), method='hq_linear', clip=(0, maxval))
        print("%8.2f ms - demosaicing (high quality, %s)"%(elapsed(t0), bayerPattern))

    if config.ccm is not None:
        t0 = time.time()
        raw = np.dot(raw, config.ccm.T)
        raw = np.clip(raw, 0, maxval)
        print("%8.2f ms - applying CCM [%s]"%(elapsed(t0), config.ccmfile))

    if config.gamma is not None:  # sRGB | rec709 | None
        t0 = time.time()
        raw = raw.astype(np.float32)
        raw = isptools.gamma(raw, maxval, config.gamma)
        print("%8.2f ms - applying gamma curve (%s)"%(elapsed(t0), config.gamma))

    if outbpp is not None and maxval != (2**outbpp - 1):
        t0 = time.time()
        newmaxval = 2**outbpp - 1
        raw = isptools.quantize(raw, maxval, newmaxval)
        maxval = newmaxval
        print("%8.2f ms - converting from %d bpp to %d bpp"%(elapsed(t0), bpp, outbpp))

    if raw.dtype not in [np.uint8, np.uint16]:
        t0 = time.time()
        oldtype = raw.dtype
        newtype = 'uint8' if maxval <= 255 else 'uint16'
        rounded = raw + 0.5
        raw = rounded.astype(newtype)
        print("%8.2f ms - converting from %s to %s"%(elapsed(t0), oldtype, newtype))

    if not config.dryRun:
        t0 = time.time()
        raw = np.clip(raw, 0, maxval)
        imgio.imwrite(outfilename, raw, maxval)
        print("%8.2f ms - writing output file: %d x %d, %d bpp [%s]"%(elapsed(t0), width, height, bpp, outfilename))

    print("%8.2f ms - TOTAL\n"%(elapsed(tStart)))


class TerminationRequest(IOError):
    pass


def _onExit():
    raise TerminationRequest("Terminated by the user.")


def _assert(expression, message_if_false):
    if not expression:
        print(message_if_false)
        raise AssertionError(message_if_false)


def _enforce(expression, message_if_false):
    if not expression:
        print(message_if_false)
        sys.exit(-1)


def _process(config, infilespec):
    infilename = os.path.basename(infilespec)
    outfilename = infilename.rsplit('.', 1)[0] + "." + config.outformat
    bayer2ppm(config, infilespec, outfilename)


def main():
    config = ISPConfig()
    config.width, config.height = argv.intpair("--size")
    config.bpp = argv.intval("--bpp", default=None, accepted=[8, 10, 12, 14, 16])
    config.bayerPattern = argv.stringval("--bayer", default="RGGB", accepted=["RGGB", "GBRG", "BGGR", "GRBG"])
    config.blackLevel = argv.floatstring("--blacklevel", default="AUTO", accepted=["AUTO"])
    config.whiteLevel = argv.floatstring("--whitelevel", default="MAX", accepted=["AUTO", "MAX"])
    config.gic = argv.floatval("--gic")
    config.wb = argv.floatpair("--wb")
    config.wp = argv.floattriple("--wp")
    config.ccmfile = argv.stringval("--ccm", default=None)
    config.gamma = argv.stringval("--gamma", default=None, accepted=["rec709", "sRGB"])
    config.outbpp = argv.intval("--outbpp", default=None, accepted=[8, 10, 12, 14, 16])
    config.verbose = argv.exists("--verbose")
    config.debug = argv.exists("--debug")
    showHelp = argv.exists("--help")
    argv.exitIfAnyUnparsedOptions()

    if len(sys.argv) < 2 or showHelp:
        print("Usage: bayer2ppm [options] inputfile.[pgm|png|dng|raw] ...")
        print()
        print("  options:")
        print("    --bpp N                        bits per pixel (for .RAW only); default = None")
        print("    --size M N                     image width & height in pixels (for .RAW only); default = None")
        print("    --bayer RGGB|GBRG|BGGR|GRBG    Bayer order of input file; default = RGGB")
        print("    --blacklevel N|AUTO            pixel value to subtract from all pixels; default = AUTO")
        print("    --whitelevel N|AUTO|MAX        pixel value to consider fully saturated; default = MAX")
        print("    --gic F                        multiply Gr pixels by F to fix green imbalance; default = 1.000")
        print("    --wb R B                       multiply R and B pixels by the given factors; default = 1.0 1.0")
        print("    --wp R G B                     alternative way to specify WB gains; equivalent to '--wb G/R G/B'")
        print("    --ccm filename.csv             load 3 x 3 color correction matrix from CSV file; default = None")
        print("    --gamma sRGB|rec709            apply gamma according to sRGB or rec709; default = None")
        print("    --outbpp N                     output bit depth (None = keep original); default = None")
        print("    --debug                        write unprocessed data to disk as .PGM (for .RAW only)")
        print("    --verbose                      print extra traces for diagnostics")
        print("    --help                         show this help message")
        print()
        print("  Converts the given 10/12/16-bit Bayer raw PGM/PNG/RAW file(s) into RGB PPM using a reference")
        print("  ISP pipeline written in Python.")
        print()
        sys.exit(-1)

    # derive WB gains from given RGB white point (G must have highest value)
    if config.wp is not None:
        rGain = config.wp[1] / config.wp[0]
        bGain = config.wp[1] / config.wp[2]
        config.wb = (rGain, bGain)

    # load 3 x 3 CCM from given CSV file
    if config.ccmfile is not None:
        ccmfiles, basenames = argv.filenames([config.ccmfile])
        _enforce(len(ccmfiles) > 0, "CCM file %s not found. Terminating."%(config.ccmfile))
        config.ccm = np.genfromtxt(config.ccmfile, delimiter=",")

    filenames, _ = argv.filenames(sys.argv[1:], [".pgm", ".png", ".dng", ".nef", ".raw", ".cr2"], sort=True, allowAllCaps=True)
    arguments = [(config, filename) for filename in filenames]
    numFiles = len(filenames)
    _enforce(numFiles > 0, "No valid raw Bayer PGM/PNG/DNG/RAW files to process. Terminating.")
    signal.signal(signal.SIGINT, lambda s, f: _onExit())  # Ctrl+C handler
    ncpu = multiproc.cpu_count()
    nproc = max(1, int(ncpu / 2))
    print("Processing %d image(s) using up to %d concurrent processes..."%(numFiles, nproc))
    exitcode = -1
    try:
        t0 = time.time()
        multiproc.run(_process, arguments, nproc, raise_exceptions=True)
        elapsed = time.time() - t0
        perFile = float(elapsed) / numFiles * 1000
        if numFiles > 1:
            print("Processed %d files in %.1f seconds (%d ms per file)"%(numFiles, elapsed, perFile))
        exitcode = 0
    except BaseException as e:
        if config.verbose:
            import traceback
            traceback.print_exc()
        else:
            print(f"{e.__class__.__name__}: {e}")
    finally:
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        sys.exit(exitcode)


if __name__ == "__main__":
    main()
